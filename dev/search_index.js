var documenterSearchIndex = {"docs":
[{"location":"index.html#GrapheneQFT.jl","page":"Index","title":"GrapheneQFT.jl","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"  GrapheneQFT","category":"page"},{"location":"index.html#GrapheneQFT","page":"Index","title":"GrapheneQFT","text":"This package provides provides a set of functions to facilitate the field-theoretic treatment of monolayer graphene using the tight-binding model. The Hamiltonian employed by this package includes only the nearest-neighbor hopping term with t = 28eV. The derivation of the formalism is available here.\n\n\n\n\n\n","category":"module"},{"location":"index.html#Module-Index","page":"Index","title":"Module Index","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"Modules = [GrapheneQFT]\nOrder   = [:constant, :type, :function, :macro]\n","category":"page"},{"location":"index.html#Detailed-API","page":"Index","title":"Detailed API","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"Modules = [GrapheneQFT]\nOrder   = [:constant, :type, :function, :macro]","category":"page"},{"location":"index.html#GrapheneQFT.Coupling","page":"Index","title":"GrapheneQFT.Coupling","text":"struct Coupling\n    V::Float64              # Coupling to a graphene atom\n    coord::GrapheneCoord    # Location of the graphene atom\nend\n\nA structure describing the coupling V (in eV) between an impurity state and a graphene atom at coord.\n\n\n\n\n\n","category":"type"},{"location":"index.html#GrapheneQFT.GrapheneCoord","page":"Index","title":"GrapheneQFT.GrapheneCoord","text":"struct GrapheneCoord\n    u::Int\n    v::Int\n    sublattice::Sublattice\nend\n\nLattice coordinate of a carbon atom, generated using graphene_A or graphene_B. Each coordinate contains the sublattice index, as well as the integer coefficients of the two basis vectors dtimes(pm 1 hatx + sqrt3haty)  2, where d = 246Å is the graphene lattice constant.\n\n\n\n\n\n","category":"type"},{"location":"index.html#GrapheneQFT.GrapheneSystem","page":"Index","title":"GrapheneQFT.GrapheneSystem","text":"mutable struct GrapheneSystem\n    μ::Float64                          # Chemical potential\n    T::Float64                          # Temperature\n    imps::Vector{ImpurityState}         # Impurity states in the system\n    pert::Dict{Tuple{GrapheneCoord,GrapheneCoord},Float64}  # Direct perturbation\n    Δ::Array{Float64,2}                 # Δ matrix\n    V::Array{Float64,2}                 # V Matrix\n    scattering_atoms::Vector{GrapheneCoord} # List of all perturbed atoms\nend\n\nA structure describing the perturbed graphene system. Whenever an impurity or a direct perturbation (coupling between graphene atoms) is added or removed, the Δ and V matrices are updated, as is the list of the perturbed atoms scattering_atoms.\n\n\n\n\n\n","category":"type"},{"location":"index.html#GrapheneQFT.ImpurityState","page":"Index","title":"GrapheneQFT.ImpurityState","text":"mutable struct ImpurityState\n    ϵ::Float64                  # Impurity state energy\n    coupling::Vector{Coupling}  # Coupling array for the impurity\nend\n\nA structure describing an impurity state with energy ϵ (in eV) and containing a list of all its couplings to graphene atoms.\n\n\n\n\n\n","category":"type"},{"location":"index.html#GrapheneQFT.Location","page":"Index","title":"GrapheneQFT.Location","text":"struct Location\n    x::Float64\n    y::Float64\n    z::Float64\nend\n\nA structure describing a point in 3D space, with the lengths in Å\n\n\n\n\n\n","category":"type"},{"location":"index.html#GrapheneQFT.G_R-Tuple{Any, GrapheneQFT.GrapheneCoord, GrapheneQFT.GrapheneCoord, GrapheneQFT.GrapheneSystem}","page":"Index","title":"GrapheneQFT.G_R","text":"G_R(z, a1::GrapheneCoord, a2::GrapheneCoord, s::GrapheneSystem)\n\nThe full real-space graphene Green's function in the presence of defects as a function of complex energy z.\n\nArguments\n\nz: complex energy\na1: GrapheneCoord of the first atom\na2: GrapheneCoord of the second atom\ns: GrapheneSystem for which G_R is calculated\n\nOutput\n\nComplexF64\n\n\n\n\n\n","category":"method"},{"location":"index.html#GrapheneQFT.add_coupling!-Tuple{GrapheneQFT.ImpurityState, Any, Any}","page":"Index","title":"GrapheneQFT.add_coupling!","text":"add_coupling!(imp::ImpurityState, V::Float64, coord::GrapheneCoord)\n\nA function to add a coupling to an existing ImpurityState.\n\nArguments\n\nimp: an existing ImpurityState\nV: coupling energy (in eV)\ncoord: GrapheneCoord to which one wishes to couple the impurity\n\nOutput\n\nImpurityState with an added element in the coupling list\n\n\n\n\n\n","category":"method"},{"location":"index.html#GrapheneQFT.add_impurity!-Tuple{GrapheneQFT.GrapheneSystem, GrapheneQFT.ImpurityState}","page":"Index","title":"GrapheneQFT.add_impurity!","text":"add_impurity!(s::GrapheneSystem, imp::ImpurityState)\n\nA function to add an impurity to an existing GrapheneSystem.\n\nArguments\n\ns: an existing GrapheneSystem\nimp: the ImpurityState to be added\n\nOutput\n\nGrapheneSystem with an added element in the impurity list\n\n\n\n\n\n","category":"method"},{"location":"index.html#GrapheneQFT.add_perturbation!-Tuple{GrapheneQFT.GrapheneSystem, GrapheneQFT.GrapheneCoord, GrapheneQFT.GrapheneCoord, Float64}","page":"Index","title":"GrapheneQFT.add_perturbation!","text":"add_perturbation!(\n    s::GrapheneSystem,\n    a::GrapheneCoord,\n    b::GrapheneCoord,\n    Δ::Float64,\n)\n\nIntroduce a direct coupling between graphene atoms a and b or, if a==b, a local potential\n\nArguments\n\ns: an existing GrapheneSystem\na: GrapheneCoord of the first atom\nb: GrapheneCoord of the second atom\nΔ: coupling between the atoms\n\nOutput\n\nGrapheneSystem with the newly-added coupling\n\n\n\n\n\n","category":"method"},{"location":"index.html#GrapheneQFT.crystal_to_cartesian-Tuple{GrapheneQFT.GrapheneCoord}","page":"Index","title":"GrapheneQFT.crystal_to_cartesian","text":"crystal_to_cartesian(coord::GrapheneCoord)\n\nConvert a crystal coordinate to a cartesian one for plotting.\n\nArguments\n\ncoord: a GrapheneCoord that needs to be converted to a 3D Location\n\nOutput\n\nLocation of the carbon atom\n\n\n\n\n\n","category":"method"},{"location":"index.html#GrapheneQFT.graphene_A-Tuple{Int64, Int64}","page":"Index","title":"GrapheneQFT.graphene_A","text":"graphene_A(u::Int, v::Int)\n\nCreate a GrapheneCoord for an atom belonging to sublattice A at the unit cell (u, v)\n\nArguments\n\nu: coefficient of basis vector dtimes(1 hatx + sqrt3haty)  2\nv: coefficient of basis vector dtimes(-1 hatx + sqrt3haty)  2\n\nOutput\n\nGrapheneCoord of the carbon atom\n\n\n\n\n\n","category":"method"},{"location":"index.html#GrapheneQFT.graphene_B-Tuple{Int64, Int64}","page":"Index","title":"GrapheneQFT.graphene_B","text":"graphene_B(u::Int, v::Int)\n\nCreate a GrapheneCoord for an atom belonging to sublattice B at the unit cell (u, v)\n\nArguments\n\nu: coefficient of basis vector dtimes(1 hatx + sqrt3haty)  2\nv: coefficient of basis vector dtimes(-1 hatx + sqrt3haty)  2\n\nOutput\n\nGrapheneCoord of the carbon atom\n\n\n\n\n\n","category":"method"},{"location":"index.html#GrapheneQFT.graphene_neighbors-Tuple{GrapheneQFT.GrapheneCoord}","page":"Index","title":"GrapheneQFT.graphene_neighbors","text":"graphene_neighbors(atom::GrapheneCoord)\n\nDetermine the nearest neighbors of an atom.\n\nArguments\n\natom: GrapheneCoord whose nearest neighbors are to be determined\n\nOutput\n\nA Vector of GrapheneCoord containing the neighbors of atom\n\n\n\n\n\n","category":"method"},{"location":"index.html#GrapheneQFT.new_graphene_system-Tuple{}","page":"Index","title":"GrapheneQFT.new_graphene_system","text":"new_graphene_system()\n\nCreate a new GrapheneSystem.\n\nArguments\n\nNone\n\nOutput\n\nGrapheneSystem with T = 0, μ = 0, and no defects.\n\n\n\n\n\n","category":"method"},{"location":"index.html#GrapheneQFT.new_impurity-Tuple{Any}","page":"Index","title":"GrapheneQFT.new_impurity","text":"new_impurity(ϵ::Float64)\n\nA function to create a new impurity.\n\nArguments\n\nϵ: energy of the impurity state\n\nOutput\n\nImpurityState with an empty coupling list\n\n\n\n\n\n","category":"method"},{"location":"index.html#GrapheneQFT.remove_coupling!-Tuple{GrapheneQFT.ImpurityState, Int64}","page":"Index","title":"GrapheneQFT.remove_coupling!","text":"remove_coupling!(imp::ImpurityState, ind::Int)\n\nA function to remove a coupling from an existing ImpurityState.\n\nArguments\n\nimp: an existing ImpurityState\nind: the index of the coupling in the coupling list to be removed\n\nOutput\n\nImpurityState with the desired coupling removed\n\n\n\n\n\n","category":"method"},{"location":"index.html#GrapheneQFT.remove_impurity!-Tuple{GrapheneQFT.GrapheneSystem, Int64}","page":"Index","title":"GrapheneQFT.remove_impurity!","text":"remove_impurity!(s::GrapheneSystem, ind::Int)\n\nA function to remove an impurity from an existing GrapheneSystem.\n\nArguments\n\ns: an existing GrapheneSystem\nind: the index of the impurity in the impurity list to be removed\n\nOutput\n\nGrapheneSystem with the desired impurity removed\n\n\n\n\n\n","category":"method"},{"location":"index.html#GrapheneQFT.remove_perturbation!-Tuple{GrapheneQFT.GrapheneSystem, GrapheneQFT.GrapheneCoord, GrapheneQFT.GrapheneCoord}","page":"Index","title":"GrapheneQFT.remove_perturbation!","text":"remove_perturbation!(\n    s::GrapheneSystem,\n    a::GrapheneCoord,\n    b::GrapheneCoord,\n)\n\nRemove a coupling between graphene atoms a and b or, if a==b, a local potential\n\nArguments\n\ns: an existing GrapheneSystem\na: GrapheneCoord of the first atom\nb: GrapheneCoord of the second atom\n\nOutput\n\nGrapheneSystem with the coupling removed\n\n\n\n\n\n","category":"method"},{"location":"index.html#GrapheneQFT.set_T!-Tuple{GrapheneQFT.GrapheneSystem, Float64}","page":"Index","title":"GrapheneQFT.set_T!","text":"set_T!(s::GrapheneSystem, new_T::Float64)\n\nModify the temperature of an existing GrapheneSystem\n\nArguments\n\ns: an existing GrapheneSystem\nnew_T: new temperature\n\nOutput\n\nGrapheneSystem with the new temperature new_T\n\n\n\n\n\n","category":"method"},{"location":"index.html#GrapheneQFT.set_μ!-Tuple{GrapheneQFT.GrapheneSystem, Float64}","page":"Index","title":"GrapheneQFT.set_μ!","text":"set_μ!(s::GrapheneSystem, new_μ::Float64)\n\nModify the chemical potential of an existing GrapheneSystem\n\nArguments\n\ns: an existing GrapheneSystem\nnew_μ: new chemical potential\n\nOutput\n\nGrapheneSystem with the new chemical potential new_μ\n\n\n\n\n\n","category":"method"},{"location":"index.html#GrapheneQFT.Γ-Tuple{Any, GrapheneQFT.GrapheneSystem}","page":"Index","title":"GrapheneQFT.Γ","text":"Γ(z, s::GrapheneSystem)\n\nThe full impurity Green's function with the correction due to the impurities' interaction with graphene.\n\nArguments\n\nz: complex energy\ns: GrapheneSystem for which Γ_R is calculated\n\nOutput\n\nMatrix{ComplexF64}\n\n\n\n\n\n","category":"method"},{"location":"index.html#GrapheneQFT.δG_R-Tuple{Any, GrapheneQFT.GrapheneCoord, GrapheneQFT.GrapheneCoord, GrapheneQFT.GrapheneSystem}","page":"Index","title":"GrapheneQFT.δG_R","text":"δG_R(z, a1::GrapheneCoord, a2::GrapheneCoord, s::GrapheneSystem)\n\nThe correction to the real-space graphene Green's function in the presence of defects as a function of complex energy z.\n\nArguments\n\nz: complex energy\na1: GrapheneCoord of the first atom\na2: GrapheneCoord of the second atom\ns: GrapheneSystem for which δG_R is calculated\n\nOutput\n\nComplexF64\n\n\n\n\n\n","category":"method"},{"location":"index.html#GrapheneQFT.δΓ-Tuple{Any, GrapheneQFT.GrapheneSystem}","page":"Index","title":"GrapheneQFT.δΓ","text":"δΓ(z, s::GrapheneSystem)\n\nThe correction to the impurity Green's function due to the impurities' interaction with graphene.\n\nArguments\n\nz: complex energy\ns: GrapheneSystem for which δΓ_R is calculated\n\nOutput\n\nMatrix{ComplexF64}\n\n\n\n\n\n","category":"method"}]
}
